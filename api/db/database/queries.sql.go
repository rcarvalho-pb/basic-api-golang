// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"
)

const createPublication = `-- name: CreatePublication :execresult
insert into publications (title, content, author_id) values (?, ?, ?)
`

type CreatePublicationParams struct {
	Title    string
	Content  string
	AuthorID int32
}

func (q *Queries) CreatePublication(ctx context.Context, arg CreatePublicationParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPublication, arg.Title, arg.Content, arg.AuthorID)
}

const createUser = `-- name: CreateUser :execresult
insert into users(name, nick, email, password) values (?, ?, ?, ?)
`

type CreateUserParams struct {
	Name     string
	Nick     string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.Name,
		arg.Nick,
		arg.Email,
		arg.Password,
	)
}

const deletePublicationById = `-- name: DeletePublicationById :exec
delete from publications where id = ?
`

func (q *Queries) DeletePublicationById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePublicationById, id)
	return err
}

const deleteUserById = `-- name: DeleteUserById :exec
delete from users where id = ?
`

func (q *Queries) DeleteUserById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUserById, id)
	return err
}

const dislikePublication = `-- name: DislikePublication :exec
update publications set likes =
case 
  when likes > 0 then likes - 1
  else likes
end
where id = ?
`

func (q *Queries) DislikePublication(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, dislikePublication, id)
	return err
}

const findPublicationById = `-- name: FindPublicationById :one
select p.id, p.title, p.content, p.author_id, p.likes, p.created_at, u.nick from publications p inner join users u where p.id = ?
`

type FindPublicationByIdRow struct {
	ID        int32
	Title     string
	Content   string
	AuthorID  int32
	Likes     sql.NullInt32
	CreatedAt sql.NullTime
	Nick      string
}

func (q *Queries) FindPublicationById(ctx context.Context, id int32) (FindPublicationByIdRow, error) {
	row := q.db.QueryRowContext(ctx, findPublicationById, id)
	var i FindPublicationByIdRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.AuthorID,
		&i.Likes,
		&i.CreatedAt,
		&i.Nick,
	)
	return i, err
}

const findPublications = `-- name: FindPublications :many
select distinct p.id, p.title, p.content, p.author_id, p.likes, p.created_at, u.nick from publications p inner join users u on u.id = p.author_id inner join followers f on p.author_id = f.user_id where u.id = ? or f.follower_id = ? order by 1 desc
`

type FindPublicationsParams struct {
	ID         int32
	FollowerID int32
}

type FindPublicationsRow struct {
	ID        int32
	Title     string
	Content   string
	AuthorID  int32
	Likes     sql.NullInt32
	CreatedAt sql.NullTime
	Nick      string
}

func (q *Queries) FindPublications(ctx context.Context, arg FindPublicationsParams) ([]FindPublicationsRow, error) {
	rows, err := q.db.QueryContext(ctx, findPublications, arg.ID, arg.FollowerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindPublicationsRow
	for rows.Next() {
		var i FindPublicationsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.AuthorID,
			&i.Likes,
			&i.CreatedAt,
			&i.Nick,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUser = `-- name: FindUser :many
select id, name, nick, email, password, created_at from users where name like ? or nick like ?
`

type FindUserParams struct {
	Name string
	Nick string
}

func (q *Queries) FindUser(ctx context.Context, arg FindUserParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, findUser, arg.Name, arg.Nick)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Nick,
			&i.Email,
			&i.Password,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const followUser = `-- name: FollowUser :execresult
insert ignore into followers (user_id, follower_id) values (?, ?)
`

type FollowUserParams struct {
	UserID     int32
	FollowerID int32
}

func (q *Queries) FollowUser(ctx context.Context, arg FollowUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, followUser, arg.UserID, arg.FollowerID)
}

const getAllUserFollow = `-- name: GetAllUserFollow :many
select u.id, u.name, u.nick, u.email, u.created_at from users u
inner join followers f on u.id = f.follower_id where f.user_id = ?
`

type GetAllUserFollowRow struct {
	ID        int32
	Name      string
	Nick      string
	Email     string
	CreatedAt sql.NullTime
}

func (q *Queries) GetAllUserFollow(ctx context.Context, userID int32) ([]GetAllUserFollowRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUserFollow, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUserFollowRow
	for rows.Next() {
		var i GetAllUserFollowRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Nick,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUserFollowed = `-- name: GetAllUserFollowed :many
select u.id, u.name, u.nick, u.email, u.created_at from users u
inner join followers f on u.id = f.user_id where f.follower_id = ?
`

type GetAllUserFollowedRow struct {
	ID        int32
	Name      string
	Nick      string
	Email     string
	CreatedAt sql.NullTime
}

func (q *Queries) GetAllUserFollowed(ctx context.Context, followerID int32) ([]GetAllUserFollowedRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUserFollowed, followerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUserFollowedRow
	for rows.Next() {
		var i GetAllUserFollowedRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Nick,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmailOrNick = `-- name: GetUserByEmailOrNick :one
select id, name, nick, email, password, created_at from users where email like ? or nick like ?
`

type GetUserByEmailOrNickParams struct {
	Email string
	Nick  string
}

func (q *Queries) GetUserByEmailOrNick(ctx context.Context, arg GetUserByEmailOrNickParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmailOrNick, arg.Email, arg.Nick)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Nick,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
select id, name, nick, email, password, created_at from users where id = ?
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Nick,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUserPublications = `-- name: GetUserPublications :many
select p.id, p.title, p.content, p.author_id, p.likes, p.created_at, u.nick from publications p inner join users u on u.id = p.author_id where author_id = ?
`

type GetUserPublicationsRow struct {
	ID        int32
	Title     string
	Content   string
	AuthorID  int32
	Likes     sql.NullInt32
	CreatedAt sql.NullTime
	Nick      string
}

func (q *Queries) GetUserPublications(ctx context.Context, authorID int32) ([]GetUserPublicationsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserPublications, authorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserPublicationsRow
	for rows.Next() {
		var i GetUserPublicationsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			&i.AuthorID,
			&i.Likes,
			&i.CreatedAt,
			&i.Nick,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const likePublication = `-- name: LikePublication :exec
update publications set likes = likes + 1 where id = ?
`

func (q *Queries) LikePublication(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, likePublication, id)
	return err
}

const unfollowUser = `-- name: UnfollowUser :execresult
delete from followers where user_id = ? and follower_id = ?
`

type UnfollowUserParams struct {
	UserID     int32
	FollowerID int32
}

func (q *Queries) UnfollowUser(ctx context.Context, arg UnfollowUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, unfollowUser, arg.UserID, arg.FollowerID)
}

const updatePassword = `-- name: UpdatePassword :exec
update users set password = ? where id = ?
`

type UpdatePasswordParams struct {
	Password string
	ID       int32
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.Password, arg.ID)
	return err
}

const updatePublication = `-- name: UpdatePublication :exec
update publications set title = ?, content = ? where id = ?
`

type UpdatePublicationParams struct {
	Title   string
	Content string
	ID      int32
}

func (q *Queries) UpdatePublication(ctx context.Context, arg UpdatePublicationParams) error {
	_, err := q.db.ExecContext(ctx, updatePublication, arg.Title, arg.Content, arg.ID)
	return err
}

const updateUserById = `-- name: UpdateUserById :exec
update users set name = ?, nick = ?, email = ?, password = ? where id = ?
`

type UpdateUserByIdParams struct {
	Name     string
	Nick     string
	Email    string
	Password string
	ID       int32
}

func (q *Queries) UpdateUserById(ctx context.Context, arg UpdateUserByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateUserById,
		arg.Name,
		arg.Nick,
		arg.Email,
		arg.Password,
		arg.ID,
	)
	return err
}
