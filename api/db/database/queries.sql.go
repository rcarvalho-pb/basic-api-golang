// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
insert into users(name, nick, email, password) values (?, ?, ?, ?)
`

type CreateUserParams struct {
	Name     string
	Nick     string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.Name,
		arg.Nick,
		arg.Email,
		arg.Password,
	)
}

const deleteUserById = `-- name: DeleteUserById :exec
delete from users where id = ?
`

func (q *Queries) DeleteUserById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUserById, id)
	return err
}

const findUser = `-- name: FindUser :many
select id, name, nick, email, password, created_at from users where name like ? or nick like ?
`

type FindUserParams struct {
	Name string
	Nick string
}

func (q *Queries) FindUser(ctx context.Context, arg FindUserParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, findUser, arg.Name, arg.Nick)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Nick,
			&i.Email,
			&i.Password,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const followUser = `-- name: FollowUser :execresult
insert ignore into followers (user_id, follower_id) values (?, ?)
`

type FollowUserParams struct {
	UserID     int32
	FollowerID int32
}

func (q *Queries) FollowUser(ctx context.Context, arg FollowUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, followUser, arg.UserID, arg.FollowerID)
}

const getUserByEmailOrNick = `-- name: GetUserByEmailOrNick :one
select id, name, nick, email, password, created_at from users where email like ? or nick like ?
`

type GetUserByEmailOrNickParams struct {
	Email string
	Nick  string
}

func (q *Queries) GetUserByEmailOrNick(ctx context.Context, arg GetUserByEmailOrNickParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmailOrNick, arg.Email, arg.Nick)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Nick,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
select id, name, nick, email, password, created_at from users where id = ?
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Nick,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserById = `-- name: UpdateUserById :exec
update users set name = ?, nick = ?, email = ?, password = ? where id = ?
`

type UpdateUserByIdParams struct {
	Name     string
	Nick     string
	Email    string
	Password string
	ID       int32
}

func (q *Queries) UpdateUserById(ctx context.Context, arg UpdateUserByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateUserById,
		arg.Name,
		arg.Nick,
		arg.Email,
		arg.Password,
		arg.ID,
	)
	return err
}
